Mapreduce

db.temperature.insertMany([{ buoy: "buoy1", DateTime: "2024-04-11", longitude: 1.234, latitude: 2.345, low: 25, high: 30 },{ buoy: "buoy2", DateTime: "2024-04-11", longitude: 3.456, latitude: 4.567, low: 22, high: 28 },{ buoy: "buoy2", DateTime: "2024-04-12", longitude: 3.456, latitude: 4.567, low: 23, high: 29 }, { buoy: "buoy3", DateTime: "2024-04-11", longitude: 5.678, latitude: 6.789, low: 20, high: 25 },{ buoy: "buoy4", DateTime: "2024-04-11", longitude: 7.890, latitude: 8.901, low: 18, high: 23 },{ buoy: "buoy4", DateTime: "2024-04-12", longitude: 7.890, latitude: 8.901, low: 19, high: 24 },{ buoy: "buoy5", DateTime: "2024-04-11", longitude: 9.012, latitude: 10.123, low: 28, high: 32 },{ buoy: "buoy5", DateTime: "2024-04-12", longitude: 9.012, latitude: 10.123, low: 29, high: 33 },{ buoy: "buoy6", DateTime: "2024-04-11", longitude: 11.234, latitude: 12.345, low: 24, high: 29 },{ buoy: "buoy7", DateTime: "2024-04-11", longitude: 13.456, latitude: 14.567, low: 26, high: 31 }]);

db.temperature.find()


var mapFunction = function() {

    var avgTemp = (this.low + this.high) / 2;

    emit(this.buoy, avgTemp);

};

var reduceFunction = function(key, values) {

    var totalTemp = 0;

    var count = 0;

    values.forEach(function(value) {

        totalTemp += value;

        count++;

    });

    var averageTemp = totalTemp / count;

    return averageTemp;

};

var mapReduceResult = db.temperature.mapReduce(

    mapFunction,

    reduceFunction,

    { out: "average_temperatures" }

);

var oceanAverageTemp = 0;

var numBuoys = 0;

db.average_temperatures.find()

db.average_temperatures.find().forEach(function(doc) {

    oceanAverageTemp += doc.value;

    numBuoys++;

});


oceanAverageTemp /= numBuoys;

print("Ocean average temperature:", oceanAverageTemp);



db.transactions.insertMany([

  { category: "Food", amount: 50, timestamp: new Date("2024-04-10") },

  { category: "Food", amount: 30, timestamp: new Date("2024-04-11") },

  { category: "Electronics", amount: 200, timestamp: new Date("2024-04-12") },

  { category: "Books", amount: 100, timestamp: new Date("2024-04-12") },

  { category: "Books", amount: 150, timestamp: new Date("2024-04-13") }

]);


db.transactions.mapReduce(

  function() {

    emit(this.category, this.amount);

  },

  function(key, values) {

    return Array.sum(values);

  },

  {

    out: "categoryTotals",

    query: { status: "active" },

    sort: { timestamp: 1 },

    finalize: function(key, reducedValue) {

      return { category: key, totalAmount: reducedValue };

    },

    scope: {

      customVariable: 100,

      customFunction: function(value) {

        return value * 2;

      }

    }

  }

);


—------------------------------------------------------------------------------


Redis

REDIS - WHOLE CODE

 

WORKSHEET- 3 QUESTIONS

 

—-----------------------------------------------------------------------------------------------------------

 

FIRST STATEMENTS:

 

SORTED SET:

 

The keys (called members) are unique, and the values (called scores) are limited to

floating-point numbers.

ZSETs have the unique property in Redis of being  able to be accessed by members (like a HASH), but items can also be accessed by the sorted order and values of the scores.

 

 

redis.zadd("redis_key_name", {data: score})

Ex:  

 

INPUT

r.zadd("try-1",{"mem2":334})

r.zadd("try-1",{"mem1":654})

r.zrange('try-1',0,-1,desc=True,withscores=True)

-- 0 stands for the starting index and -1 stands for the ending index

-- desc and withscores are optional and are by default “False”

 

OUTPUT

[('mem1', 654.0), ('mem2', 334.0)]

 

 

INPUT

r.zrangebyscore("try-1",200,400,0,-1,withscores=True)

 

-- Here 200 stands for the min score value and 400 for the max score val

In this desc is not a parameter (ie) cannot give desc

 

OUTPUT

[('mem2', 334.0)]

 

 

 

 

 

INPUT

r.zrem("try-1","mem1")

Remove an element from the sorted set :

r.zrange('try-1',0,-1,desc=True,withscores=True) : [('mem2', 334.0)]

 

r.delete("try-1")

Delete the sorted set

r.zrange('try-1',0,-1,desc=True,withscores=True) : []

 

 

 

HASHES:

 

HASHes store a mapping of keys to values.

-        Storing complex data structures, such as objects, as it allows you to associate multiple fields and values within a single Redis key.

-        Tracking user information or metadata in web applications, where each field can represent a different attribute of the user.

 

 

r.hset("21pd08",'name','Prethika')

r.hset("21pd08",'age',21)

r.hset('21pd08',"city","coimbatore")

1

r.hset("21pd31",mapping={'name':'Sanjana','age':20,'city':'dindigul'})

3

 

r.hexists("21pd08","year")

False

r.hexists("21pd08","city")

True

 

r.hgetall("21pd08")

{'name': 'Prethika', 'age': '21', 'city': 'coimbatore'}

r.hget('21pd08','age')

‘21’

- numbers will be printed as lists only but the can be incremented

r.hincrby("21pd08",'age',3)

24

 

r.hdel("21pd08",'city')

r.hdel('21pd08','name','age')

- You can delete a single key or multiple keys like shown above

 

r.hkeys('21pd08') ;

- Gets all the keys of that hash

 

r.hmget("21pd08",'name','age') : ['Prethika', '24']

- gets multiple keys (not all the keys only the ones specified)

 

 

 

SETS :

 

 

r.sadd("set1","value1")

r.sadd("set1","value2")

r.sadd("set1",1,2,4)

r.sadd("set1",*[6,7,8])

 

r.smembers('set1')

{'1', '2', '4', '6', '7', '8', 'value1', 'value2'}

 

r.sismember("set1","try1") : 0

r.sismember("set1","value1") :  1

- 1 indicates it is a member 0 indicates it is not

 

r.srem("set1",1) :1

r.srem("set1",2,3,4) : 2

- the 1 represents one item modified/deleted

- the 2 tells that only 2 of 2,3,4 is deleted : 3 is not available in the set

 

 

 

 

 

 

LISTS :

 

LISTs in Redis store an ordered sequence of strings.

Note that an item can be in the list more than once.

We can push items to the front and the back of the LIST with LPUSH/RPUSH;

we can pop items from the front and back of the list with LPOP/RPOP;

we can fetch an item at a given position with LINDEX;

and we can fetch a range of items with LRANGE.

 

r.rpush('list-item','a',1,'3rd value')

 

r.lrange('list-item',0,-1)

- there is no attribute called rrange

r.lindex('list-item',2)

‘3rd value’

 

r.lpop('list-item') : ‘a’

r.lrange('list-item',0,-1) : ['1', '3rd value']

r.rpop('list-item') : ‘3rd value’

 

 

 

 

STRINGS :

We can GET values, SET values, and DEL values.

 

 

 

—-------------------------------------------------------------------------------------------------

 

 

WORKSHEET - QUESTION 1 (PRETHIKA CODE)

 

def add_book(r):

  title=input("Enter book title : ")

  author=input("Enter author name : ")

  isbn=int(input("Enter ISBN number : "))

  copyright=input("Enter copy-right (y/n) : ")

  phn=int(input("Enter phone number : "))

  price=float(input("Enter price")) r.hset("Book-data",mapping={'Title':title,'Author':author,'ISBN':isbn,'Copy-right':copyright,'Phone no': phn,'Price':price})

  genre=input("Enter the genre : ")

  r.sadd(genre,title)

  r.zadd("Sales-Ranking",{title:0})

 

def buy_book(r,title):

  r.zincrby("Sales-Ranking",1,title)

 

def show_rankings(r):

  print(r.zrange("Sales-Ranking",0,-1,withscores=True))

 

add_book(r)

buy_book(r,'abc')

show_rankings(r)

 

 

—----------------------------------------------------------------------------------------------------------------------------

 

WORKSHEET QUESTION 1 - SHARMILA CODE:

 

import redis

keyListSet=[]

keyListHash=[]

def addBook(conn,key,name,author,ISBN,format,date,pgno,price):

        key+='h'

        keyListHash.append(key)

        temp={"Name":name,"Author":author,"copyDate":date,"ISBN":ISBN,"Format":format,"Page Number":pgno,"Price":price}

        conn.hmset(key,temp)

        print(f"Key:{key[:-1]} added successfully!")

 

def addGenre(conn,key,genre):

        key+='s'

        keyListSet.append(key)

        conn.sadd(key,*genre)

        print(f"Key:{key[:-1]} All Genre added successfully!")

 

def addRank(conn,key,sales):

        conn.zadd("Books",{key:sales})

        print(f"Key:{key} added to Sales-rank successfully!")

 

def getBooksGenre(conn,genre):

        ans=[]

        for i in keyListSet:

                b=conn.smembers(i)

                if genre in b:

                     ans.append(i[:-1])

        return ans

 

def getBooksAuthor(conn,author):

        ans=[]

        for i in keyListHash:

                t=conn.hgetall(i)

                if author in t["Author"]:

                     ans.append(i[:-1])

        return ans

 

r=redis.Redis()

host="127.0.0.1"

port=6379

r=redis.StrictRedis(host=host,port=port,decode_responses=True)

addBook(r,"LoM","LoM","Cuttle","14-01-2004",1200,"Novel",1439,2500)

addGenre(r,"LoM",["Sci-fi","Thriller","Mystery","DarkFantasy"])

addRank(r,"LoM",55000)

print(getBooksGenre(r,"Sci-fi"))

print(getBooksGenre(r,"Fiction"))

print(getBooksAuthor(r,"Cuttle"))

print(getBooksAuthor(r,"King"))
